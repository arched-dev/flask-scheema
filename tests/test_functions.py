# Generated by CodiumAI

from flask_scheema.utilities import validate_flask_limiter_rate_limit_string


class TestValidateRateLimitString:

    #  Valid rate limit string with integer and "per" followed by allowed time unit
    def test_valid_rate_limit_string(self):
        # Arrange
        rate_limit_str = "10 per minute"

        # Act
        result = validate_flask_limiter_rate_limit_string(rate_limit_str)
        # Arrange
        rate_limit_str_two = "10 per 5 minutes"

        # Act
        result_two = validate_flask_limiter_rate_limit_string(rate_limit_str_two)

        # Assert
        assert result is True
        assert result_two is True

    #  Empty string
    def test_empty_string(self):
        # Arrange
        rate_limit_str = ""

        # Act
        result = validate_flask_limiter_rate_limit_string(rate_limit_str)

        # Assert
        assert result == False


from flask_scheema.api.utils import convert_case


class TestConvertCase:

    #  The function correctly converts a string to camelCase.
    def test_convert_to_camel_case(self):
        # Arrange
        s = "hello_world"
        target_case = "camelCase"
        expected_result = "helloWorld"

        # Act
        result = convert_case(s, target_case)

        # Assert
        assert result == expected_result

    #  The function correctly converts a string to PascalCase.
    def test_convert_to_pascal_case(self):
        # Arrange
        s = "hello_world"
        target_case = "PascalCase"
        expected_result = "HelloWorld"

        # Act
        result = convert_case(s, target_case)

        # Assert
        assert result == expected_result

    #  The function correctly converts a string to snake_case.
    def test_convert_to_snake_case(self):
        # Arrange
        s = "HelloWorld"
        target_case = "snake_case"
        expected_result = "hello_world"

        # Act
        result = convert_case(s, target_case)

        # Assert
        assert result == expected_result

    #  The function correctly converts a string to SCREAMING_SNAKE_CASE.
    def test_convert_to_screaming_snake_case(self):
        # Arrange
        s = "HelloWorld"
        target_case = "SCREAMING_SNAKE_CASE"
        expected_result = "HELLO_WORLD"

        # Act
        result = convert_case(s, target_case)

        # Assert
        assert result == expected_result

    #  The function correctly handles an empty string.
    def test_handle_empty_string(self):
        # Arrange
        s = ""
        target_case = "camelCase"
        expected_result = ""

        # Act
        result = convert_case(s, target_case)

        # Assert
        assert result == expected_result

    #  The function correctly handles a string with only one word.
    def test_handle_single_word_string(self):
        # Arrange
        s = "hello"
        target_case = "PascalCase"
        expected_result = "Hello"

        # Act
        result = convert_case(s, target_case)

        # Assert
        assert result == expected_result

    #  The function correctly handles a string with only uppercase letters.
    def test_handle_uppercase_string(self):
        # Arrange
        s = "HELLO_WORLD"
        target_case = "snake_case"
        expected_result = "hello_world"

        # Act
        result = convert_case(s, target_case)

        # Assert
        assert result == expected_result

    #  The function correctly handles a string with only lowercase letters.
    def test_handle_lowercase_string(self):
        # Arrange
        s = "hello_world"
        target_case = "SCREAMING_SNAKE_CASE"
        expected_result = "HELLO_WORLD"

        # Act
        result = convert_case(s, target_case)

        # Assert
        assert result == expected_result


# Generated by CodiumAI

from flask_scheema.api.utils import pluralize_last_word

import pytest


class TestPluralizeLastWord:

    #  pluralizes last word in camelCase
    def test_pluralize_last_word_camel_case(self):
        # Arrange
        converted_name = "camelCase"

        # Act
        result = pluralize_last_word(converted_name)

        # Assert
        assert result == "camelCases"

    #  pluralizes last word in PascalCase
    def test_pluralize_last_word_pascal_case(self):
        # Arrange
        converted_name = "PascalCase"

        # Act
        result = pluralize_last_word(converted_name)

        # Assert
        assert result == "PascalCases"

    #  pluralizes last word in snake_case
    def test_pluralize_last_word_snake_case(self):
        # Arrange
        converted_name = "snake_case"

        # Act
        result = pluralize_last_word(converted_name)

        # Assert
        assert result == "snake_cases"

    #  pluralizes last word in SCREAMING_SNAKE_CASE
    def test_pluralize_last_word_screaming_snake_case(self):
        # Arrange
        converted_name = "SCREAMING_SNAKE_CASE"

        # Act
        result = pluralize_last_word(converted_name)

        # Assert
        assert result == "SCREAMING_SNAKE_CASES"


    #  input with only one word returns the plural of that word
    def test_pluralize_last_word_single_word(self):
        # Arrange
        converted_name = "word"

        # Act
        result = pluralize_last_word(converted_name)

        # Assert
        assert result == "words"

    #  input with only non-alphabetic characters returns the same input
